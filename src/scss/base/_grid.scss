// -------------------------------------------------------------------------
// NOTES
// -------------------------------------------------------------------------

// Pear has a responsive, semantic, CSS grid that was built without floats. It utilizes inline-block to avoid clearfix or other float issues and is compatible with all modern browsers (IE8+).

// How to use the grid:

// 1. Write the necessary HTML and...
		// A. Utilize one of these methods for eliminating the space between inline-block elements: http://css-tricks.com/fighting-the-space-between-inline-block-elements/
		// B. Create horizontal groups of columns by placing them inside a `div` with the classname `.row` (you don't need to do this for any elements that don't utilize the column mixin). This is to offset the padding on the first and last column via negative margin.

// 2. Use the customization options below to specify the number of columns you want in your grid, the padding you want on both sides of your columns (gutter), and the .container styles.

// 3. Apply columns to the HTML you wrote using the mixin, with the number of columns in the parameter, like so:
//             article { @include column(9); }
//             section { @include column(3); }

// Note: Using this mixin will do the following to the element:
		// - Make it inline-block
		// - Vertical align it to the top
		// - Assign the appropriate width based on the number of columns, along with the padding

// -------------------------------------------------------------------------
// CUSTOMIZATION
// -------------------------------------------------------------------------

// Change the number of columns you want in your grid:
$totalnumbercolumns: 12; 

// Change the padding you want on both sides of a column. This number * 2 = your gutter.
// I usually make this a multiple of the baseline to add more consistency and structure.
$columnpadding: 0.666rem;

.container {
    width: 90%;
	max-width: 1000px;
	margin: 0 auto;
}

// -------------------------------------------------------------------------
// THE MIXIN AND .ROW CLASS
// -------------------------------------------------------------------------

$columnwidth: (100% / $totalnumbercolumns);

@mixin column($numbercolumns) {
  	// inline-block instead of floating :) This is happiness.
  	vertical-align: top;
  	display: inline-block;
	*display: inline;
	*zoom: 1;
	width: ($columnwidth * $numbercolumns);
	padding: 0 $columnpadding;
  	overflow: hidden;
	*overflow: visible;
}

.row {
  	margin: 0 (-$columnpadding); // Offset padding on the first and last column
}